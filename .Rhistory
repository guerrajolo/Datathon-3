library(readr)
newProductAttributes <- read_csv("Desktop/Product_Analysis_Data/newProductAttributes.csv")
View(newProductAttributes)
library(readxl)
profitability <- read_excel("Desktop/Product_Analysis_Data/profitability.xlsx")
View(profitability)
View(newProductAttributes)
View(profitability)
library(swirl)
swirl()
1 + 2
5 + 7
x <- 5 + 7
x =
0
x
y = x - 3
y <- x-3
y
swir
swirl
Swirl()
start
ls
hel
help()
help.start()
swirl(start)
library(swirl)
swirl()
5+7
x<-5 + 7
x
y<- x-3
y
c(1.1, 9, 3.14)
z<- c(1.1, 9, 3.14)
?c
z
helo
help()
z <- c(z,555,z)
z <- c(z,555,x)
z <- c(z,555,y)
z <- c(z,555)
ls
library(readr)
library(swirl)
install.packages(c("swirl", "readr"))
library(readr)
ls
?read.csv
runif(5)
myDF <- read_csv("/Users/gherardolattanzi/Desktop/R Tutorial Data Sets/cars.csv)
myDF <- read_csv("/Users/gherardolattanzi/Desktop/R Tutorial Data Sets/cars.csv)
myDF <- read_csv("/Users/gherardolattanzi/Desktop/R Tutorial Data Sets/cars.csv)
myDF <- read_csv("/Users/gherardolattanzi/Desktop/R Tutorial Data Sets/cars.csv)
head (mydf)
myDF <- read_csv("/Users/gherardolattanzi/Desktop/R Tutorial Data Sets/cars.csv)
head (myDF)
myDF <- read_csv("/Users/gherardolattanzi/Desktop/R Tutorial Data Sets/cars.csv)
head (myDF)
attributes(myDF)
ls
cd
summary(myDF)
summary(object = myDF)
summary(help)
summary(cars.csv)
summary(myDF)
str(myDF)
str(myDF)
nnames(myDF)
names(myDF)
library(readr)
cars <- read_csv("Desktop/R Tutorial Data Sets/cars.csv")
View(cars)
str(cars)
hist(cars)
hist(help)
help(hist)
hist(cars, $A1)
hist(cars, $B5)
library(swirl)
swirl()
hist(cars, $B7)
hist(cars, B7)
hist(cars, 8)
names(cars)
1
1
hist(cars, name of car, speed of car)
hist(cars, breaks = "Sturges",
freq = NULL, probability = !freq,
include.lowest = TRUE, right = TRUE,
density = NULL, angle = 45, col = NULL, border = NULL,
main = paste("Histogram of" , xname),
xlim = range(breaks), ylim = NULL,
xlab = xname, ylab,
axes = TRUE, plot = TRUE, labels = FALSE,
nclass = NULL, warn.unused = TRUE, ...)
hist(cars, breaks = "speed of car",
freq = NULL, probability = !freq,
include.lowest = TRUE, right = TRUE,
density = NULL, angle = 45, col = NULL, border = NULL,
main = paste("Histogram of" , xname),
xlim = range(breaks), ylim = NULL,
xlab = xname, ylab,
axes = TRUE, plot = TRUE, labels = FALSE,
nclass = NULL, warn.unused = TRUE, ...)
hist(cars)
hist(1)
hist(cars,
main="speed of cars",
xlab="distance of car",
border="blue",
col="green",
xlim=c(100,700),
las=1,
breaks=5)
hist(1,
main="speed of cars",
xlab="distance of car",
border="blue",
col="green",
xlim=c(100,700),
las=1,
breaks=5)
hist(cars,
main="speed of cars",
xlab="distance of car",
border="blue",
col="green",
xlim=c(0,700),
las=1,
breaks=5)
hist(cars,
main="speed of cars",
xlab="distance of car",
border="blue",
col="green",
xlim=c(1,1000),
las=1,
breaks=1)
hist(myDF,
main="speed of cars",
xlab="distance of car",
border="blue",
col="green",
xlim=c(1,1000),
las=1,
breaks=1)
hist(12,
main="speed of cars",
xlab="distance of car",
border="blue",
col="green",
xlim=c(1,1000),
las=1,
breaks=1)
hist(12,
main="speed of cars",
xlab="distance of car",
border="blue",
col="green",
xlim=c(1,1000),
las=1,
breaks=100)
hist(200,
main="speed of cars",
xlab="distance of car",
border="blue",
col="green",
xlim=c(1,1000),
las=1,
breaks=100)
hist(200,
main="speed of cars",
xlab="distance of car",
border="blue",
col="green",
xlim=c(1,1000),
las=100,
breaks=100)
hist(200,
main="speed of cars",
xlab="distance of car",
border="blue",
col="green",
xlim=c(1,1000),
las=10,
breaks=100)
hist(200,
main="speed of cars",
xlab="distance of car",
border="blue",
col="green",
xlim=c(1,1500),
las=1,
breaks=100)
View(cars)
hist(cars,
main="speed of cars",
xlab="distance of car",
border="blue",
col="green",
xlim=c(1,1500),
las=1,
breaks=100)
hist($B5,
main="speed of cars",
xlab="distance of car",
border="blue",
col="green",
xlim=c(1,1500),
las=1,
breaks=100)
hist(cars,
main="speed of cars",
xlab="distance of car",
border="blue",
col="green",
xlim=c(1,1500),
las=1,
breaks=100)
attributes(cars)
hist(cars$`distance of car`)
plot(cars$`distance of car`, cars$`speed of car`)
plot(cars$`distance of car`,`speed of car`)
plot(cars$`distance of car`,$cars`speed of car`)
qqnorm(cars$`name of car`)
qqnorm(cars$`speed of car`)
names(cars) <-c("prova2", "prova3", "prova4")
summary(cars)
hist(cars,
main="speed of cars",
xlab="distance of car",
border="blue",
col="green",
xlim=c(0,700),
las=1,
breaks=5)
summary(cars)
library(swirl)
set.seed(2001)
ls
swirl()
swirl()
swirl()
3
install.packages(c(""ggplot2"", ""slidify""))
install.packages("ggplot2", "slidify")
library(ggplot2)
search()
search()
library(readr, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(readr)
cars <- read_csv("Desktop/R Tutorial Data Sets/cars.csv")
View(cars)
library(readr)
iris <- read_csv("Desktop/R Tutorial Data Sets/iris.csv")
View(iris)
hist(iris)
hist(iris$Sepal.Length)
hist(iris$Sepal.Length, iris$Petal.Length)
scatter(iris$Sepal.Length, iris$Petal.Length)
plot(iris$Sepal.Length, iris$Petal.Length)
install.packages("caTools", lib="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
a*b
library(readr)
link <- read_csv("Desktop/link.csv", trim_ws = FALSE)
View(link)
library(readr)
report1569857204 <- read_csv("Desktop/report1569857204.csv")
View(report1569857204)
library
plot(report1569857204$DAI_minted, report1569857204$DAI_burned)
plot(report1569857204$DAI_minted, $DAI_burned)
plot(report1569857204$DAI_minted, DAI_burned)
plot(report1569857204$DAI_minted, DAI_burned)
plot(report1569857204$DAI_minted,DAI_burned)
plot(report1569857204$DAI_minted,$DAI_burned)
plot(report1569857204$DAI_minted, $DAI_burned)
plot(report1569857204$DAI_minted, report1569857204$DAI_burned)
hist(report1569857204$date, report1569857204$DAI_total_supply)
plot(report1569857204$date, report1569857204$DAI_total_supply)
hist(report1569857204$date, report1569857204$DAI_total_supply)
hist(report1569857204$date, report1569857204$DAI_total_supply)
cars$`speed of car` = as.typeofdata(distance of cars$`speed of car`)
names(cars) =-c("NameOfCar","SpeedOfCar", "DistanceOfCar")
names(cars) =-c ("NameOfCar","SpeedOfCar", "DistanceOfCar")
names(cars) =-c ("NameOfCar","SpeedOfCar","DistanceOfCar")
library(readr)
cars <- read_csv("Desktop/UBIQUM/R Tutorial Data Sets/cars.csv",
col_types = cols(`distance of car` = col_number(),
`speed of car` = col_number()))
View(cars)
names(cars)
names(cars)<-c("NameOfCar","SpeedOfCar","DistanceOfCar")
hist(cars$SpeedOfCar)
summary(ccars)
summary(cars)
set.seed(123)
trainSize<-round(nrow(cars)*0.7)
testsize<-nrow(cars)- trainSize
trainSize
testsize
training_indices<-sample(seq_len(nrow(cars)),size =trainSize)
trainSet<-cars[training_indices,]
testSet<-cars[-training_indices,]
testSet
trainSet
show(trainSet)
gherramodel<-lm(distanceofcar~speedofacar, trainset)
gherramodel<-lm(x+1)
modello1<-lm(formula, data, subset, weights, na.action,
method = "qr", model = TRUE, x = FALSE, y = FALSE, qr = TRUE,
singular.ok = TRUE, contrasts = NULL, offset, ...)
modello1<-lm(formula, data, subset, weights, na.action,
method = "qr", model = TRUE, x = FALSE, y = FALSE, qr = TRUE,
singular.ok = TRUE, contrasts = NULL, offset)
modello1<-lm(formula, cars, $speedofcar, weights, na.action,
method = "qr", model = TRUE, x = FALSE, y = FALSE, qr = TRUE,
singular.ok = TRUE, contrasts = NULL, offset)
gherramodel<-lm(distanceofcar~speedofacar, trainset)
gherramodel<-lm(distanceofcar~speedofcar, trainset)
gherramodel<-lm(cars$distanceofcar~cars$speedofcar, trainset)
show(trainSet)
gherramodel<-lm(cars$distanceofcar~cars$speedofcar, trainSet)
gherramodel<-lm(trainSet)
show(trainSet)
install.packages("caret", lib="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
singular.ok = TRUE, contrasts = NULL, offset)
show(trainSet)
scatter.smooth(x=cars$SpeedOfCar, y=cars$DistanceOfCar, main="DistanceOfCar ~ SpeedOfacar")
swirl()
library(swirl, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
swirl()
swirl()
summary*()
load("~/.RData")
summary(rdata)
library(readr)
CompleteResponses <- read_csv("Desktop/CompleteResponses.csv")
View(CompleteResponses)
library(readr)
SurveyIncomplete <- read_csv("Desktop/SurveyIncomplete.csv")
View(SurveyIncomplete)
scatter.smooth(x=cars$SpeedOfCar, y=cars$DistanceOfCar, main="DistanceOfCar ~ SpeedOfacar")
View(trainSet)
summary(CompleteResponses)
cor(CompleteResponses, )
cor(CompleteResponses, 1, 2, 6)
cor(CompleteResponses, c(1,4,6))
ts <- as.ts(HymanMinsky, start= 2002, end = 2020)
library(readr)
HymanMinsky <- read_csv("Desktop/bitcoin-master/HymanMinsky.csv")
View(HymanMinsky)
hyman <- read.csv("HymanMinsky <- read_csv("Desktop/bitcoin-master/HymanMinsky.csv")
")
Â¶
ts <- as.ts(HymanMinsky, start= 2002, end = 2020)
Decred <- read_csv("Desktop/Data_Science/Datasets/top-100-cryptocurrency-historical-data/Decred.csv")
Decred$Date <- as.POSIXct((Decred$Date), format="%Y-%m-%b")
ts_decred <- as.ts(Decred, frequency=52, start=c(2016,01))
ts_seasonal(ts_decred, type = "all")
ts_surface(timeseriestrain)
ts_plot(timeseriestrain, slider = TRUE)
ts_decompose(timeseriestrain)
ts_heatmap(timeseriestrain)
ts_lags(timeseriestrain)
ts_cor(timeseriestrain, lag.max = 60)
ts_lags(timeseriestrain, lags = c(12, 24, 36, 48))
ts_ma(timeseriestrain)
HymanMinsky <- read_csv("Desktop/bitcoin-master/HymanMinsky.csv")
View(HymanMinsky)
plot(HymanMinsky$x, HymanMinsky$y)
load("~/Desktop/Data_Science/Ubiqum Projects/Wifi Location/.RData")
install.packages("qrmdata", lib="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
install.packages("crypto", lib="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(rstudioapi)
library(ggplot2)
library(caret)
library(dplyr)
library(readr)
setwd(dirname(getActiveDocumentContext()$path))
training <- read_csv("~/Desktop/Datathon_wine-master/data/training.csv")
training$quality <- as.factor(training$quality)
ggplot(training, aes(quality)) +
geom_bar()  +
labs(title=" Dependent variable distribution",
x ="Quality of the wine",
y = "")
set.seed(42)
index <- createDataPartition(training$quality, p = 0.5, list = FALSE)
train_data <- training[index, ]
test_data  <- training[-index, ]
library(DMwR)
train_data <- as.data.frame(train_data)
training <- as.data.frame(training)
test_data <- as.data.frame(test_data)
test_data[1958:1962] <- test_data[1208:1213]
set.seed(42)
tdsmote <- SMOTE(quality~.,train_data, perc.over = 1000, k = 3, perc.under = 4000)
table(tdsmote$quality)
tdsmote <- SMOTE(quality~.,train_data, perc.over = 1000, k = 3, perc.under = 5000)
table(tdsmote$quality)
tdsmote <- SMOTE(quality~.,train_data, perc.over = 1000, k = 33, perc.under = 5000)
table(tdsmote$quality)
tdsmote <- SMOTE(quality~.,train_data, perc.over = 1000, k = 4, perc.under = 5000)
table(tdsmote$quality)
model_rf <- train(quality ~ ., data = tdsmote, method = "rf",
trControl = trainControl(method = "cv", number = 2))
tdsmote <- as.data.frame(tdsmote)
# baseline by rf in Caret
model_rf <- train(quality ~ ., data = tdsmote, method = "rf",
trControl = trainControl(method = "cv", number = 2))
tdsmote
View(tdsmote)
model_rf <- train(quality ~ ., data = tdsmote, method = "rf",
trControl = trainControl(method = "cv", number = 2))
final <- data.frame(actual = test_data$quality, predict(model_rf, test_data))
tdsmote
model_rf <- train(quality ~ ., data = train_data, method = "rf",
trControl = trainControl(method = "cv", number = 2))
final <- data.frame(actual = tdsmote$quality, predict(model_rf, test_data))
final <- data.frame(actual = train_data$quality, predict(model_rf, test_data))
cm_original <- confusionMatrix(final$predict, test_data$quality)
model_rf
model_rf
final <- (actual = train_data$quality, predict(model_rf, test_data))
final <- data.frame(actual = train_data$quality, predict(model_rf, test_data))
final
finalresults <- predict(model_rf, test_data)
finalresults
model_rf
validation <- read.csv("data/validation.csv", sep = ",", header = TRUE)
finalpreds <- predict(model_rf, validation)
View(validation)
validation <- as.data.frame(validation)
print(validation$quality)
finalpreds <- predict(model_rf, validation)
finalpreds <- predict(model_rf, validation, type ='class')
# baseline by rf in Caret
set.seed(42)
model_rf <- train(quality ~ ., data = train_data, method = "rf",
trControl = trainControl(method = "cv", number = 2))
final <- data.frame(actual = train_data$quality, predict(model_rf, test_data))
finalresults <- predict(model_rf, test_data)
finalresults
finalresults <- predict(model_rf, validation)
finalresults <- predict(model_rf, validation$quality)
model_rf
model_rf <- train(quality ~ ., data = tdsmote, method = "rf",
trControl = trainControl(method = "cv", number = 2))
tdsmote
set.seed(42)
model_rf <- train(quality ~ ., data = tdsmote, method = "rf",
trControl = trainControl(method = "cv", number = 2))
na.exclude(tdsmote)
set.seed(42)
model_rf <- train(quality ~ ., data = tdsmote, method = "rf",
trControl = trainControl(method = "cv", number = 2))
tdsmote
tdsmote
model_rf <- train(quality ~ ., data = tdsmote, method = "rf",
trControl = trainControl(method = "cv", number = 2))
model_rf <- train(quality ~ ., data = train_data, method = "rf",
trControl = trainControl(method = "cv", number = 2))
model_rf
tdsmote
model_rf
final <- data.frame(actual = train_data$quality, predict(model_rf, test_data))
final <- data.frame(actual = train_data$quality, predict(model_rf, validation))
finalresults <- predict(model_rf, validation)
final <- data.frame(actual = train_data$quality, predict(model_rf, validation))
set.seed(42)
final <- data.frame(actual = train_data$quality, predict(model_rf, validation))
validation
